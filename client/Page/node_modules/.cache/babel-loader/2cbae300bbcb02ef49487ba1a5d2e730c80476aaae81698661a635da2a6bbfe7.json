{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mamad\\\\OneDrive\\\\Teluq\\\\Teluq-computer\\\\INF1430\\\\Expensetracker\\\\client\\\\Page\\\\src\\\\Monthlyspending.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useMemo } from \"react\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, ResponsiveContainer, Tooltip } from \"recharts\";\n\n// ðŸ”¥ Define category colors\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst categoryColors = {\n  \"Groceries\": \"#098903\",\n  \"Shopping\": \"#E5BA0B\",\n  \"Rent\": \"#33ff57\",\n  \"Utilities\": \"#3357ff\",\n  \"Transport\": \"#E4080A\",\n  \"Dining Out\": \"#0BA504\",\n  \"Entertainment\": \"#F2CA28\",\n  \"Food Delivery\": \"#089B00\",\n  \"Food\": \"#098403\",\n  \"Restaurant\": \"#0BA603\",\n  \"Fast Food\": \"#09B601\",\n  \"Gas Station\": \"#842401\",\n  \"Travel\": \"#E4080A\",\n  \"Convenience\": \"#E4080A\",\n  \"Subscription\": \"#00FADD\",\n  \"Services\": \"#00E3C9\",\n  \"Education\": \"#001AFA\",\n  \"Healthcare\": \"#AC2AF2\",\n  \"Miscellaneous\": \"#C0D101\",\n  \"Home Improvement\": \"#5F524D\",\n  \"Vet\": \"#A35CC8\",\n  \"Telecommunications\": \"#EC69E4\",\n  \"Other\": \"#888888\",\n  \"Investments\": \"#040175\",\n  \"Rent\": \"#D86D03\",\n  \"Transfer\": \"#F94AAA\",\n  \"Debt\": \"#970102\",\n  \"Remove\": \"#000000\"\n};\n\n// ðŸ”¥ Define custom category stacking order\nconst customOrder = [\"Rent\", \"Food Delivery\", \"Groceries\", \"Restaurant\", \"Fast Food\", \"Food\", \"Travel\", \"Transport\", \"Convenience\", \"Entertainment\", \"Miscellaneous\", \"Shopping\", \"Education\", \"Transfer\", \"Home Improvement\", \"Healthcare\", \"Vet\", \"Services\", \"Subscription\", \"Telecommunications\", \"Debt\"];\n\n// ðŸ”¥ Custom Tooltip Component (includes total spending per month)\nconst CustomTooltip = ({\n  active,\n  payload\n}) => {\n  if (active && payload && payload.length) {\n    const totalSpending = payload.reduce((sum, entry) => sum + entry.value, 0);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        backgroundColor: \"white\",\n        padding: \"10px\",\n        border: \"1px solid #ddd\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: payload[0].payload.month\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 20\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [\"Total: $\", totalSpending.toFixed(2)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 20\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this), payload.map((entry, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: entry.color\n        },\n        children: [entry.name, \": $\", entry.value.toFixed(2)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this);\n  }\n  return null;\n};\n_c = CustomTooltip;\nconst MonthlySpendingPage = () => {\n  _s();\n  const [transactions, setTransactions] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [selectedBanks, setSelectedBanks] = useState([]);\n  useEffect(() => {\n    fetch(\"http://localhost:5000/api/transactions\").then(response => response.json()).then(data => {\n      setTransactions(data);\n      setLoading(false);\n    }).catch(error => {\n      console.error(\"Error fetching transactions:\", error);\n      setError(error.message);\n      setLoading(false);\n    });\n  }, []);\n\n  // ðŸ”¥ Get unique list of banks for filtering\n  const bankOptions = useMemo(() => [...new Set(transactions.map(txn => txn.bank))], [transactions]);\n\n  // ðŸ”¥ Filter transactions by selected banks\n  const filteredTransactions = useMemo(() => {\n    if (selectedBanks.length === 0) return transactions; // No filter applied\n    return transactions.filter(txn => selectedBanks.includes(txn.bank));\n  }, [transactions, selectedBanks]);\n\n  // ðŸ”¥ Get last completed month (e.g., if today is February, show up to January)\n  const getLastCompletedMonth = () => {\n    const today = new Date();\n    today.setDate(1); // Set to the first day of the current month\n    today.setMonth(today.getMonth() - 1); // Go back one month\n    return today.toISOString().substring(0, 7); // Format as YYYY-MM\n  };\n\n  // ðŸ”¥ Aggregate spending by month and category (only for completed months)\n  const aggregateSpendingByMonth = () => {\n    const lastCompletedMonth = getLastCompletedMonth();\n    const monthlySpending = filteredTransactions.reduce((acc, txn) => {\n      const month = txn.date.substring(0, 7); // Extract YYYY-MM\n      if (month > lastCompletedMonth) return acc; // Skip current incomplete month\n\n      if (!acc[month]) acc[month] = {\n        month,\n        total: 0\n      };\n      acc[month].total += txn.amount;\n      acc[month][txn.category] = (acc[month][txn.category] || 0) + txn.amount;\n      return acc;\n    }, {});\n    return Object.values(monthlySpending).sort((a, b) => a.month.localeCompare(b.month));\n  };\n\n  // ðŸ”¥ Processed monthly spending data\n  const spendingByMonth = useMemo(() => aggregateSpendingByMonth(), [filteredTransactions]);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      fontFamily: \"Arial, sans-serif\",\n      padding: \"40px\",\n      backgroundColor: \"white\",\n      color: \"black\",\n      maxWidth: \"1000px\",\n      margin: \"auto\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        textAlign: \"center\",\n        fontSize: \"2.2em\",\n        marginBottom: \"30px\"\n      },\n      children: \"Monthly Spending Breakdown\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: \"20px\",\n        textAlign: \"center\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        style: {\n          fontSize: \"1.2em\",\n          marginRight: \"10px\"\n        },\n        children: \"Select Bank(s):\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        multiple: true,\n        value: selectedBanks,\n        onChange: e => setSelectedBanks([...e.target.selectedOptions].map(option => option.value)),\n        style: {\n          width: \"300px\",\n          height: \"120px\"\n        },\n        children: bankOptions.map((bank, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: bank,\n          children: bank\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      width: \"100%\",\n      height: 300,\n      children: /*#__PURE__*/_jsxDEV(BarChart, {\n        data: spendingByMonth,\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"month\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n          content: /*#__PURE__*/_jsxDEV(CustomTooltip, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 39\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 21\n        }, this), customOrder.map(category => /*#__PURE__*/_jsxDEV(Bar, {\n          dataKey: category,\n          stackId: \"a\",\n          fill: categoryColors[category] || categoryColors[\"Other\"]\n        }, category, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 25\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 9\n  }, this);\n};\n_s(MonthlySpendingPage, \"OlMsoy8N36aYqeZ4t1fA41dxOwk=\");\n_c2 = MonthlySpendingPage;\nexport default MonthlySpendingPage;\nvar _c, _c2;\n$RefreshReg$(_c, \"CustomTooltip\");\n$RefreshReg$(_c2, \"MonthlySpendingPage\");","map":{"version":3,"names":["React","useEffect","useState","useMemo","BarChart","Bar","XAxis","YAxis","CartesianGrid","ResponsiveContainer","Tooltip","jsxDEV","_jsxDEV","categoryColors","customOrder","CustomTooltip","active","payload","length","totalSpending","reduce","sum","entry","value","style","backgroundColor","padding","border","children","month","fileName","_jsxFileName","lineNumber","columnNumber","toFixed","map","index","color","name","_c","MonthlySpendingPage","_s","transactions","setTransactions","loading","setLoading","error","setError","selectedBanks","setSelectedBanks","fetch","then","response","json","data","catch","console","message","bankOptions","Set","txn","bank","filteredTransactions","filter","includes","getLastCompletedMonth","today","Date","setDate","setMonth","getMonth","toISOString","substring","aggregateSpendingByMonth","lastCompletedMonth","monthlySpending","acc","date","total","amount","category","Object","values","sort","a","b","localeCompare","spendingByMonth","fontFamily","maxWidth","margin","textAlign","fontSize","marginBottom","marginRight","multiple","onChange","e","target","selectedOptions","option","width","height","strokeDasharray","dataKey","content","stackId","fill","_c2","$RefreshReg$"],"sources":["C:/Users/Mamad/OneDrive/Teluq/Teluq-computer/INF1430/Expensetracker/client/Page/src/Monthlyspending.js"],"sourcesContent":["import React, { useEffect, useState, useMemo } from \"react\";\r\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, ResponsiveContainer, Tooltip } from \"recharts\";\r\n\r\n// ðŸ”¥ Define category colors\r\nconst categoryColors = {\r\n    \"Groceries\": \"#098903\",\r\n    \"Shopping\": \"#E5BA0B\",\r\n    \"Rent\": \"#33ff57\",\r\n    \"Utilities\": \"#3357ff\",\r\n    \"Transport\": \"#E4080A\",\r\n    \"Dining Out\": \"#0BA504\",\r\n    \"Entertainment\": \"#F2CA28\",\r\n    \"Food Delivery\": \"#089B00\",\r\n    \"Food\": \"#098403\",\r\n    \"Restaurant\": \"#0BA603\",\r\n    \"Fast Food\": \"#09B601\",\r\n    \"Gas Station\": \"#842401\",\r\n    \"Travel\": \"#E4080A\",\r\n    \"Convenience\": \"#E4080A\",\r\n    \"Subscription\": \"#00FADD\",\r\n    \"Services\": \"#00E3C9\",\r\n    \"Education\": \"#001AFA\",\r\n    \"Healthcare\": \"#AC2AF2\",\r\n    \"Miscellaneous\": \"#C0D101\",\r\n    \"Home Improvement\": \"#5F524D\",\r\n    \"Vet\": \"#A35CC8\",\r\n    \"Telecommunications\": \"#EC69E4\",\r\n    \"Other\": \"#888888\",\r\n    \"Investments\": \"#040175\",\r\n    \"Rent\": \"#D86D03\",\r\n    \"Transfer\": \"#F94AAA\",\r\n    \"Debt\": \"#970102\",\r\n    \"Remove\": \"#000000\"\r\n};\r\n\r\n// ðŸ”¥ Define custom category stacking order\r\nconst customOrder = [\r\n    \"Rent\", \"Food Delivery\", \"Groceries\", \"Restaurant\", \"Fast Food\", \"Food\",\r\n    \"Travel\", \"Transport\", \"Convenience\", \"Entertainment\", \"Miscellaneous\",\r\n    \"Shopping\", \"Education\", \"Transfer\", \"Home Improvement\", \"Healthcare\", \"Vet\",\r\n    \"Services\", \"Subscription\", \"Telecommunications\", \"Debt\"\r\n];\r\n\r\n// ðŸ”¥ Custom Tooltip Component (includes total spending per month)\r\nconst CustomTooltip = ({ active, payload }) => {\r\n    if (active && payload && payload.length) {\r\n        const totalSpending = payload.reduce((sum, entry) => sum + entry.value, 0);\r\n\r\n        return (\r\n            <div style={{ backgroundColor: \"white\", padding: \"10px\", border: \"1px solid #ddd\" }}>\r\n                <p><strong>{payload[0].payload.month}</strong></p>\r\n                <p><strong>Total: ${totalSpending.toFixed(2)}</strong></p>\r\n                {payload.map((entry, index) => (\r\n                    <p key={index} style={{ color: entry.color }}>\r\n                        {entry.name}: ${entry.value.toFixed(2)}\r\n                    </p>\r\n                ))}\r\n            </div>\r\n        );\r\n    }\r\n    return null;\r\n};\r\n\r\nconst MonthlySpendingPage = () => {\r\n    const [transactions, setTransactions] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    const [selectedBanks, setSelectedBanks] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetch(\"http://localhost:5000/api/transactions\")\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                setTransactions(data);\r\n                setLoading(false);\r\n            })\r\n            .catch(error => {\r\n                console.error(\"Error fetching transactions:\", error);\r\n                setError(error.message);\r\n                setLoading(false);\r\n            });\r\n    }, []);\r\n\r\n    // ðŸ”¥ Get unique list of banks for filtering\r\n    const bankOptions = useMemo(() => [...new Set(transactions.map(txn => txn.bank))], [transactions]);\r\n\r\n    // ðŸ”¥ Filter transactions by selected banks\r\n    const filteredTransactions = useMemo(() => {\r\n        if (selectedBanks.length === 0) return transactions; // No filter applied\r\n        return transactions.filter(txn => selectedBanks.includes(txn.bank));\r\n    }, [transactions, selectedBanks]);\r\n\r\n    // ðŸ”¥ Get last completed month (e.g., if today is February, show up to January)\r\n    const getLastCompletedMonth = () => {\r\n        const today = new Date();\r\n        today.setDate(1); // Set to the first day of the current month\r\n        today.setMonth(today.getMonth() - 1); // Go back one month\r\n        return today.toISOString().substring(0, 7); // Format as YYYY-MM\r\n    };\r\n\r\n    // ðŸ”¥ Aggregate spending by month and category (only for completed months)\r\n    const aggregateSpendingByMonth = () => {\r\n        const lastCompletedMonth = getLastCompletedMonth();\r\n        const monthlySpending = filteredTransactions.reduce((acc, txn) => {\r\n            const month = txn.date.substring(0, 7); // Extract YYYY-MM\r\n            if (month > lastCompletedMonth) return acc; // Skip current incomplete month\r\n\r\n            if (!acc[month]) acc[month] = { month, total: 0 };\r\n            acc[month].total += txn.amount;\r\n            acc[month][txn.category] = (acc[month][txn.category] || 0) + txn.amount;\r\n\r\n            return acc;\r\n        }, {});\r\n\r\n        return Object.values(monthlySpending).sort((a, b) => a.month.localeCompare(b.month));\r\n    };\r\n\r\n    // ðŸ”¥ Processed monthly spending data\r\n    const spendingByMonth = useMemo(() => aggregateSpendingByMonth(), [filteredTransactions]);\r\n\r\n    if (loading) return <div>Loading...</div>;\r\n    if (error) return <div>Error: {error}</div>;\r\n\r\n    return (\r\n        <div style={{ fontFamily: \"Arial, sans-serif\", padding: \"40px\", backgroundColor: \"white\", color: \"black\", maxWidth: \"1000px\", margin: \"auto\" }}>\r\n            <h1 style={{ textAlign: \"center\", fontSize: \"2.2em\", marginBottom: \"30px\" }}>Monthly Spending Breakdown</h1>\r\n\r\n            {/* ðŸ”¥ Bank Filter (Multi-Select) */}\r\n            <div style={{ marginBottom: \"20px\", textAlign: \"center\" }}>\r\n                <label style={{ fontSize: \"1.2em\", marginRight: \"10px\" }}>Select Bank(s):</label>\r\n                <select multiple value={selectedBanks} onChange={(e) => setSelectedBanks([...e.target.selectedOptions].map(option => option.value))} style={{ width: \"300px\", height: \"120px\" }}>\r\n                    {bankOptions.map((bank, index) => (\r\n                        <option key={index} value={bank}>{bank}</option>\r\n                    ))}\r\n                </select>\r\n            </div>\r\n\r\n            {/* ðŸ”¥ Stacked Bar Chart with Tooltip */}\r\n            <ResponsiveContainer width=\"100%\" height={300}>\r\n                <BarChart data={spendingByMonth}>\r\n                    <CartesianGrid strokeDasharray=\"3 3\" />\r\n                    <XAxis dataKey=\"month\" />\r\n                    <YAxis />\r\n                    <Tooltip content={<CustomTooltip />} />\r\n                    {customOrder.map(category => (\r\n                        <Bar\r\n                            key={category}\r\n                            dataKey={category}\r\n                            stackId=\"a\"\r\n                            fill={categoryColors[category] || categoryColors[\"Other\"]}\r\n                        />\r\n                    ))}\r\n                </BarChart>\r\n            </ResponsiveContainer>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MonthlySpendingPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}